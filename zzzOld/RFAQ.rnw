<<echo=FALSE, cache=FALSE, results='hide'>>=
set_parent('IntroStats.Rnw')
@

\chapter{R FAQ}
\vspace{-60pt}
This appendix contains answers to some frequently asked questions related to using R with this book.

%\renewcommand{\labelenumi}{(\alph{enumi})}

\section{Running R}
\subsection{How do I install R, Rstudio, or the NCStats package?}
Step-by-step instructions for installing R, RStudio, or the NCStats package are given in \sectref{sect:RSetup}.  The only difference might be that the version numbers have changed since those directions were created.

You can check the install of the NCStats package by typing \R{library(NCStats)}.  This may produce some warnings related to version numbers, but it should not produce any errors.  If one of the errors is related to some other package not being found then see \sectref{sect:RFAQOtherPkg}.

\subsection{Why can't some other packages be found when I try to load NCStats?} \label{sect:RFAQOtherPkg}
The NCStats package is a package that I have written to make some aspects of using R for statistics classes at Northland easier. This package requires several other packages to work properly.  If you successfully install the NCStats package as described in \sectref{sect:RSetup} then these other packages should be installed automatically.  However, for some users, all or some of the packages will not be installed properly using those methods.  In these instances those packages will need to be installed manually.  The packages that will need to be installed manually will be associated with an error message following the \R{library(NCStats)} command.

Follow these steps to manually install packages with RSudio:

\begin{Enumerate}
  \item Select the ``Packages'' tab in the lower-right window of RStudio.
  \item Select the ``Install Packages'' button in the toolbar.
  \item Make sure that the ``Install from'' item says ``Repository (Cran ...''.
  \item Type the names of the packages to be installed in the ``Packages ...'' box.  You will be able to select from a list once you have typed a few letters of the package name.
  \item Make sure ``Install Dependencies'' is selected.
  \item Press the ``Install'' button.
\end{Enumerate}

RStudio may take several minutes to install the required packages.

\subsection{Why can't the NCStats package be loaded?}
If R cannot find the NCStats package when you submit the \R{library(NCStats)} command then the NCStats package was not successfully installed on your computer.  See \sectref{sect:RSetup}, but also take note of \sectref{sect:RFAQOtherPkg}.

\subsection{Wy does RStudio say ``A previously saved workspace has been restored.''?} \label{sect:RFAQRemoveWorkspace}
Upon closing RStudio you may be asked to save the workspace image. In your classes at Northland it is best to say ``No'' to this query.  If you accidentally save the workspace image you will get the following message when opening RStudio in the future.

\begin{verbatim}
[previously saved workspace restored]
\end{verbatim}

The easiest way to remove this restored workspace is to type \R{unlink(".RData")} and then close and re-open RStudio.  The saved workspace should not be restored upon re-opening RStudio.

\subsection{How do I remove an accidentally saved workspace image?}
See \sectref{sect:RFAQRemoveWorkspace}.

\subsection{What should I do if R can't find a function that I want to use?}
The inability for R to find a certain function usually occurs for one of the following reasons.

\begin{Enumerate}
  \item You typed the name of the function incorrectly -- e.g., \R{summarize} instead of \R{Summarize}, \R{ttest} rather than \R{t.test}, or \R{LeveneTest} rather than \R{leveneTest}.
  \item The package that provides that functions is not loaded.  More often than not in this class that means that you did not load the NCStats package. The NCStats package is loaded with \R{library(NCStats)}.  If the NCStats package is not installed then see \sectref{sect:RSetup}, but also take note of \sectref{sect:RFAQOtherPkg}.
\end{Enumerate}

\subsection{Why is the R prompt a \R{+} rather than a \R{>}?}
The ``arrow'' prompt (\R{>}) is the standard prompt that R uses to tell the user that it is ready for input. The plus (\R{+}) is used by R when it expects the user to finish what they started on the previous line.  Thus, when you receive the plus prompt that implies that you did not finish something on the previous line.  Most of the time this means that you did not close a set of parentheses or quotes.  The smartest thing to do when you see the plus prompt is to click in the console in RStudio (lower-left panel) and then press the ``Esc''ape key.  Then return to the script editor and correct the error (usually means add in the missing parentheses or quote). However, make sure that you press ``Esc''ape before attempting to edit your script!!!!

\subsection{How do I see the names of objects that I have created?}
There are two methods for seeing the names of objects saved in an R session.
\begin{Enumerate}
  \item Select the ``Environment'' tab (upper-right panel) in RStudio.  The items listed there are saved objects in R.
  \item Type \R{ls()} in the ``Console'' tab (lower-left panel) in RStudio.
\end{Enumerate}

\subsection{How do I make TCL/TK work with a Mac?}
The NCStats package uses TCL/TK for some interactive plots.  Some Mac users report problems with using TCL/TK.  While I am not a Mac user, nor do I have access to a Mac to test these issues, I have had some students report success installing the tcltk universal build \href{http://cran.r-project.org/bin/macosx/tools/}{located here} (or \href{http://cran.r-project.org/bin/macosx/tools/tcltk-8.5.5-x11.dmg}{direct link to the file}).  You may need to re-install the NCStats package as described in \sectref{sect:RSetup} after installing the tcltk universal build file.


\section{Reading Data Files}
\subsection{Where are the data files that Prof. Ogle provides for us?}
I will often refer to data files that I have made available to you or, in the text, it will mention a file name with a ``.txt'' extension.  These files are available from the ``Data Files'' link on the ``Resources'' page of the class webpage (or you can \href{https://sites.google.com/site/ncstats/data}{go here directly}).  On this page, you can locate the file of interest and the right-click on it to download the file to your computer.  You can then change the working directory to where you saved the file on your computer (see \sectref{sect:RFAQSetwd}) and then load the data into R with \R{read.table()} (see \sectref{sect:REnterData}).

\subsection{How do I change the working directory?} \label{sect:RFAQSetwd}
External data files are read into R with \R{read.table()} or, occasionally, \R{read.csv()}.  However, prior to using these functions, the working directory in RStudio must be set to where the data files are located.   The easiest way to do this is to start an analysis script (in the Script window in RStudio) and save it to the same directory that contains your data file.  Once this is done (and as long as that script file is still open in RStudio), the working directory can be set in RStudio by selecting the ``Session'' menu, the ``Set Working Directory'' sub-menu, and the ``To Source File Location'' sub-menu.  You should then see a \R{setwd()} command in the ``Console'' tab (it is best to copy this and paste it into your script) and the path to this directory under the ``Console'' tab (lower-left panel).  If you would like to see the list of files in this directory then click on the faint arrow to the right of path name in the ``Console.''  You should then see the list of file names under the ``Files'' tabe in the lower-right panel of RStudio.

\subsection{Why can't \R{read.table()} find my data file?}
This error typically looks like this ...
<<echo=-1>>=
d1 <- read.table("Ex1_space.txt",header=TRUE)
@

The most common reasons for this error are (prioritized by frequency of occurrence) ...
\begin{Enumerate}
  \item You have misspelled the actual name of the file.
  \item You have not changed the R working directory to where the data file is actually saved. See \sectref{sect:RFAQSetwd}.
  \item You have not saved the file as a text file.  Most commonly you saved it as an Excel file.  Converting an Excel file to a tab-delimited text file is described in \sectref{sect:REnterData}.  Alternatively, you may have saved the file as a ``comma-separated values'' file and should be using \R{read.csv()}.
\end{Enumerate}

\subsection{Why does \R{read.table()} say ``line X did not have Y elements''?} \label{sect:RFAQHeaderSpaces}
This error typically looks like this ...
<<>>=
d1 <- read.table("data/Ex1_spaces.txt",header=TRUE)
@

This error is usually caused by one of two main mistakes
\begin{Enumerate}
  \item One or more of the variable names in the header of the data file contains spaces.  This causes a problem because R considers the text file to be a new column following each ``white space'' that it finds.  For example, consider the following file (the file attempted to be read above) ...

\vspace{6pt}
\begin{verbatim}
First Name   Last Name
Derek   Ogle
Young   Kim
Sharad  Silwal
\end{verbatim}
\vspace{6pt}

R will consider this file to have four column names (``First'', ``Name'', ``Last'', and ``Name'') because each of these names in the header row is separated by white space.  Thus, R expects four columns of data in the data rows.  However, the following data rows only have two items each.  This problem can be corrected by making sure that the header names do not contain spaces.  If some sort of separation is desired than use a period or an underscore in the place of the space.  The following data file can be read into R correctly.

\vspace{6pt}
\begin{verbatim}
First.Name  Last.Name
Derek   Ogle
Young   Kim
Sharad  Silwal
\end{verbatim}
\vspace{6pt}

  \item One or more of the data rows contains missing data that was not declared with the ``NA'' value.  Missing values in R must be explicitly defined by including a ``NA'' (for ``not available'') in the position of the missing value.  If the missing value is left as a blank then R does not think enough data has been supplied, leading to the error of this FAQ.  For example, consider the following file ...

\vspace{6pt}
\begin{verbatim}
First.Name  Last.Name
Derek   Ogle
Young
Sharad  Silwal
\end{verbatim}
\vspace{6pt}

Note that the second value in the second data row is missing.  This row will look like it only has one data element rather than two.  This problem can be corrected by making sure that an ``NA'' is placed in the position of the missing data.  The following data file can be read into R correctly.

\vspace{6pt}
\begin{verbatim}
First.Name  Last.Name
Derek   Ogle
Young  NA
Sharad  Silwal
\end{verbatim}
\end{Enumerate}

\subsection{Why does \R{read.table()} say there are ``more columns than column names''?} \label{sect:RFAQMoreColumns}
Spaces in the data rows can cause a variety of problems including the one shown below (also see \sectref{sect:RFAQHeaderSpaces} for problems with spaces in the header row).

<<>>=
d1 <- read.table("data/Ex4_spaces.txt",header=TRUE)
@

This error occurred while attempting to read this file ...

\vspace{6pt}
\begin{verbatim}
classes  name  years  hometown
3   Derek Ogle     11  Iron River
4   Young Kim      19  Duluth
2   Sharad Silwal   3  Ashland
\end{verbatim}
\vspace{6pt}

This problem occurs because when the header is read R assumes that four variables will follow. However, the first data line contains six items separated by the five "white spaces" (i.e., ``3'', ``Derek'', ``Ogle'', ``11'', ``Iron'', and ``River'').  [Also see \sectref{sect:RFAQVarMessedUp} for other problems that occur with spaces in the data rows.]

This problem can be corrected in a number of ways.
\begin{Enumerate}
  \item Force R to recongize a ``tab'' rather than ``white space'' as the column delimiter by including \R{sep="\t"} in \R{read.table()}.  For example,
<<>>=
( d1 <- read.table("data/Ex4_spaces.txt",header=TRUE,sep="\t") )
@
\vspace{6pt}
  \item Save the data file (from Excel) as a ``comma separated values'' file and then read the file with \R{read.csv()}. For example,

<<>>=
( d1 <- read.csv("data/Ex4_spaces.csv",header=TRUE) )
@
\vspace{6pt}
  \item The spaces in the data rows can be replaced with periods and then read with \R{read.table()} as before.
\end{Enumerate}

\subsection{Why are my variable names ``messed up'' even though \R{read.table()} was successful?} \label{sect:RFAQVarMessedUp}
This problem can arise from a variety of mistakes with two that are quite common.

\begin{Enumerate}
  \item The \R{header=TRUE} argument in \R{read.table()} is used to tell R that the first row in the data file contains the names of variables in the data file.  Any data file that you receive from me will contain a header.  Any data file that you create should contain a header.  Thus, the \R{header=TRUE} argument should be include in every instance of \r{read.table()}.

R will not tell you that there is a a problem if the data file contains a header but you forget to use \R{header=TRUE} in \r{read.table()}.  For example, no error is produced with the following code ...

<<>>=
( d1 <- read.table("data/Ex1_spaces1.txt") )
str(d1)
@
\vspace{6pt}
However, a look at the structure of the saved object shows a clear problem -- the variables are called ``V1'' and ``V2'' rather than ``First.Name'' and ``Last.Name'' and the real names of the variables are recorded in the first row of data.

This problem is easily fixed by including \R{header=TRUE} in \r{read.table()}
<<>>=
( d1 <- read.table("data/Ex1_spaces1.txt",header=TRUE) )
@
\vspace{6pt}
  \item If spaces in the data rows cause R to think that there is only ONE MORE variable than it expected based on the number of variables in the header then it will make the first column of data appear as rownames and every other column will be shifted once to the left (see \sectref{sect:RFAQMoreColumns} for more problems with spaces in the data rows).  For example, consider this file ...

\vspace{6pt}
\begin{verbatim}
classes name  years
3   Derek Ogle     11
4   Young Kim      19
2   Sharad Silwal   2
\end{verbatim}
\vspace{6pt}

... which should have three variables (``classes'',``name'', and ``years.''  When this is read into R and examined it appears to have three variables.  However, closer inspection shows that the results did not appear under the variable names as expected.
<<>>=
( d1 <- read.table("data/Ex3_spaces.txt",header=TRUE) )
str(d1)
rownames(d1)
@
\vspace{6pt}
This problem can be fixed as described in \sectref{sect:RFAQMoreColumns}.
\end{Enumerate}

\subsection{Why are my variables called \R{V1}, \R{V2}, etc.?}
This problem arises from forgetting to use \R{header=TRUE} in \R{read.table()}. See \sectref{sect:RFAQVarMessedUp}.

\subsection{Why does my data file look like it is missing data when viewed in Notepad?}
This is just a function of spacing in tab-delimited text files.  For example, in this file

\vspace{6pt}
\begin{verbatim}
First.Name  Last.Name
Derek   Ogle
Young   Kim
Sharad  Silwal
\end{verbatim}
\vspace{6pt}

it looks like data is missing but the problem is that the variables names are longer than the data in the rows such that the spacing looks like the last column is missing.  These data will be read properly because there is the same number of delimiters (tabs or white space) in the header row as in the data rows.

\subsection{Is there an easy way to enter data into R?}
See \sectref{sect:REnterData}.


\section{Using Data Frames and Subsetting}
\subsection{How do I select two levels when subsetting with a factor variable?}
In many instances you may want to create a smaller data frame that contains only those individuals that belong in two groups represented in a larger data frame.  The smaller data frame can be constructed using \R{Subset()} as described in \sectref{sect:RSubsetdf}.  The ``trick'' here is that you want to use the ``or'' operator rather than the ``and'' operator.  For example the following data frame contains tanner crabs captured in four types of traps.
<<>>=
tan <- read.table("data/Tanner.txt",head=TRUE)
str(tan)
levels(tan$type)
@
Now suppose that you want to select only tanner crabs captured in the ``slick.board'' or ``standard'' trap types.  The \R{Subset()} function is used with two conditions (\R{type=="slick.board"} and \R{type=="standard"}) connected with an ``or'' operator.  The ``or'' operation in R is the vertical line.  Thus, the following command creates a new data frame (called ``tan1'') that contains all rows where the type is equal to ``slick.board'' or ``standard'' (note that a common mistake here is to use the ``and'' operator.  This will create a subset with no information in it because it is impossible for a trap to simultaneoulsy be both a ``slick.board'' and a ``standard'' type).

<<>>=
tan1 <- Subset(tan,type=="slick.board" | type=="standard")
levels(tan1$type)
@

The same dataframe can be obtained with the ``include'' operator which would be useful if you wanted more than two groups.  For example,

<<>>=
tan1 <- Subset(tan,type %in% c("slick.board","standard"))
levels(tan1$type)
@

\subsection{Why do levels that I don't want still appear after subsetting?}
This problem may occur if you use \R{subset()} rather than \R{Subset()}.  For example, not the differences below

<<>>=
tan <- read.table("data/Tanner.txt",head=TRUE)
str(tan)
levels(tan$type)
tan1s <- subset(tan,type=="slick.board" | type=="standard")
levels(tan1s$type)
tan1S <- Subset(tan,type=="slick.board" | type=="standard")
levels(tan1S$type)
@

\section{Specific Functions}
\subsection{What does the warning from \R{chisq.test()} mean?}
Sometimes \R{chisq.test()} will return a warning as in the following example ...

<<>>=
tan <- read.table("data/Tanner.txt",head=T)
tbl <- table(tan$type)
chi1 <- chisq.test(tbl,p=c(1,2,2,2),rescale=TRUE,correct=FALSE)
@

This warning is R's way of telling you that you have not met the assumptions required for a chi-square test -- namely that the expected table does not have more than five individuals per cell.  You can confirm this in the following way .

<<>>=
chi1$expected
@

This problem can be corrected in two ways.  First, you may collect a larger sample size.  Second, you may combine some categories so that the observed values are larger and, thus, the expected values are likely to be larger.

\subsection{Why does R say the alternative hypothesis is true event though the p-value $<\alpha$?}
Typical results from \R{t.test()} look like this ...
<<>>=
tan <- read.table("data/Tanner.txt",head=T)
t.test(tan$approach,mu=60)
@
The p-value in this example (second line of output) is greater than any reasonable value of $\alpha$ and, thus, one would conclude that the null hypothesis should not be rejected.  However, some people mistakingly interpret the third line of output as saying that the alternative hypothesis is true (and thus the null hypothesis is rejected).  R does NOT make the rejection decision for you.  The fourth line of output is simply a reminder of what you set the alternative hypothesis to in the \R{alt=} argument of \R{t.test()}.  You must decide to reject or not to reject the null hypothesis by comparing the p-value reported in the third line of output to the $\alpha$ that you have chosen.

\subsection{Why does the df for my two-sample t-test contain decimals?}
There are two types of two-sample t-tests -- (1) variances are equal and (2) variances are unequal (see \sectref{sect:t2test}).  In our introductory statistics course we only discussed the equal variances case.  In the equal variances case the degrees-of-freedom are $n_{1}+n_{2}-2$.  In the unequal variances case the degrees-of-freedom are computed from a more complicated formula that often results in fractions (decimals) of degrees-of-freedom.  Thus, if you get decimal df and you were attempting to use the equal variances formula then you forgot to set \R{var.equal=TRUE} in \R{t.test()}. Of course, before doing this you should verify with \R{leveneTest()} that the variances are statistically equal

For example, the following is the unequal variances two-sample t-test (note that the unequal variances version is also called the Welch two-sample t-test)

<<>>=
tan <- read.table("data/Tanner.txt",head=T)
tan1S <- Subset(tan,type=="slick.board" | type=="standard")
t.test(approach~type,data=tan1S)
@

The following is the same test constructed as an equal variances two-sample t-test

<<>>=
leveneTest(approach~type,data=tan1S)
t.test(approach~type,data=tan1S,var.equal=TRUE)
@

Notice the difference in degrees-of-freedom between the two tests.


\section{Formatting Written Documents in MSWord}
\subsection{How should I label and refer to tables and figures?} \label{sect:RFAQLabels}
A thorough description of how you should prepare your homework is described in \sectref{sect:ReportWriting}.  Specifically to this question, most scientific journals label figures and tables with a unique number followed by a descriptive caption and then refer to that figure or table number in the text where appropriate.  Figure labels and captions go UNDERNEATH the figure and table lables and caption go ABOVE the table.  Remember -- "table top".  A very sipmle example of this labelling and referencingscheme is shown below.

The distribution of number of approaches by Tanner Crabs to the traps is bimodal with no obvious outliers \figrefp{fig:RFAQfig}.  The center as measured by the mean is 56.70 with a standard deviation of 22.05 \tabrefp{tab:tmpSum}.
<<RFAQtab, results='asis', echo=FALSE>>=
tmp <- Summarize(~approach,data=tan)
tmp1 <- matrix(tmp,nrow=1)
colnames(tmp1) <- names(tmp)
print(xtable(tmp1,digits=2,caption="Descriptive statistics of the number of approaches by Tanner Crabs to the traps.","tab:tmpSum"),caption.placement="top",include.rownames=FALSE)
@

<<RFAQfig, echo=FALSE, fig.width=3.5, fig.height=3.5, par1=TRUE>>=
hist(~approach,data=tan,xlab="Number of Approaches",col="gray90")
@
  \begin{figure}[htbp]
    \centering
      \includegraphics[width=2in]{Figs/RFAQfig-1}
    \caption{Histogram of the number of approaches by Tanner Crabs to the traps.}
    \label{fig:RFAQfig}
  \end{figure}

\subsection{How do I remove the gray shading when pasting R output into MSWord?} \label{sect:RFAQNoGray}
By default, the R output from RStudio that you paste into MSWord will be shaded with a gray background.  This is ugly and should be avoided.  To stop this behavior you will want to paste just the text from R and drop the formatting from RStudio.  To do this, you should copy the output from RStudio, goto MSWord, choose the little arrow below the paste icon on the ``Home'' tab, and select the ``Keep Text Only'' icon (you may have to hover over the icons with your mouse to see this description).

Also see \sectref{sect:RFAQCourier} for further formatting comments.

\subsection{How do I make R output look nice in Word without having to physically type spaces or tabs?} \label{sect:RFAQCourier}
First, make sure you paste the R output without the gray background formatting (see \sectref{sect:RFAQNoGray}).

R uses ``Courier New'' as its output font.  Courier New is a constant spacing (rather than a proportional spacing) font which means that each character uses the same amount of horizontal space regarless of whether it is a ``skinny'' letter like ``i'' or a ``fat'' letter like ``o.''  When pasting output from R into MSWord the output will use the font being used in MS Word -- usually NOT Courier New.  To change the font, paste the R output into MSWord (I would suggest that you have blank lines both before and after what is pasted), highlight the pasted R output, right-click on the highlighted text, and change the font to ``Courier New'' in the ensuing dialog box.  You may need to change the font size (likely make it smaller) to make the text fit on the width of the page.

\subsection{How do I make my document single-spaced?} \label{sect:RFAQSingleSpace}
By default, MSWord is set for 1.15 spacing AND putting spacing after each paragraph.  This combination gives the impression that the document is double-spaced.  To remove this impression both the line spacing and the space after the paragraph must be changed.  To do this, highlight the text to be modified, right-click on the highlighted text and select ``Paragraph'', and in the ensuing dialog box change ``Line Spacing:'' to ``Single'' and change the value after ``After:'' under ``Spacing'' to ``0 pt.''

\subsection{How do I make $\alpha$, $\mu$, $\sigma$, or other Greek letters in Word?} \label{sect:RFAQGreek}
Greek Letters are most easily constructed by typing a certain letter and then changing the font of that letter to ``Symbol.''  When you do this, it is best to have a space both before and after the letter before changing the font.  The letters and the symbols that they will correspond to are shown in the table below.

\begin{tabular}{cc}
\hline
\hline
Letter & Symbol \\
\hline
a & $\alpha$ \\
b & $\beta$ \\
m & $\mu$ \\
s & $\sigma$ \\
\hline
\hline
\end{tabular}

\subsection{How do I create a subscript (e.g., $H_{0}$) or superscript (e.g., $s^{2}$)?}
A character can be sub- or super-scripted in MSWord by highlighting that character, right-clicking on the highlighted text, selecting ``Font'' from the ensuing list, and then selecting either ``Superscript'' or ``Subscript'' under ``Effects'' in the ensuing dialog box.

