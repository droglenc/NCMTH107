<<echo=FALSE, cache=FALSE, results='hide'>>=
set_parent('IntroStats.Rnw')
@

\chapter{Getting Data Into R} \label{chap:FoundationsR}

\vspace{-12pt}
\minitoc

\section{Setting Up R and Helpers} \label{sect:RSetup}
\vspace{-4pt}
R is a software environment for performing statistical analyses. RStudio is a helper program that makes it easier to use R. \R{NCStats} is a set of R functions that make the statistical methods used in this class easier. Herein, I will refer to R but you will interact with R through RStudio.

Detailed methods for downloading, installing, and configuring R, RStudio, and \R{NCStats} on your personal computer are given on the \href{http://derekogle.com/NCMTH107/resources#computer}{Resources page of the course website}.

\section{Working With R Basics} \label{sect:RBasics}
\vspace{-4pt}
\subsection{Saving Results} \label{sect:RSaving}
\vspace{-4pt}
Results are not saved in R. Rather, ``scripts'' of successful R commands are saved and, then, if the analysis needs to be re-done, the entire set of commands is opened and run again. When writing a report, all tabular and graphical output should be copied from R and pasted into your report document. This document will serve as your analysis report and can be modified to include answers to questions, references to the tables and graphs, etc.\footnote{Specifics for how to format homework assignments is on the course syllabus}  All data that is not a simple vector (see \sectref{sect:RVectors}) should be entered into R through ``comma-separated values'' text files (see \sectref{sect:REnterData}).

R does allow one to save a ``workspace'', though I urge you not to do that. Rather, save your ``good'' commands in a script and save your ``good'' results in a report document; do not save the workspace.


\subsection{Expressions and Assignments} \label{sect:RExprAssn}
Expressions in R are mathematical ``equations'' that are evaluated by R with a result seen immediately. An example of an expression in R is
<<>>=
5+log(7)-pi
@

where \R{log()} and \R{pi} are built-in functions used to compute the natural log and find the value of $\pi$, respectively. Expressions in R are like using a calculator where the result is shown, but not saved for subsequent analyses. In addition, expressions in R follow the same order of operations and use of parentheses as expressions entered into your calculator.

Results from an expression are typically saved for further computations by assigning the results to an object with the assignment operator (i.e., \R{<-}). The general form for saving the result of an expression into an object is \R{object <- expression}. The result of the expression will not be seen unless the object name is subsequently typed into R (but see below). For example, the result of the previous expression is saved into an object called \R{x} and then viewed with
<<>>=
x <- 5+log(7)-pi
x
@
The result of an expression can be both assigned and printed by surrounding the command in parentheses. For example, the following assigns the result of the expression to \R{y} and prints the result.\footnote{The spaces between the expression and the parentheses are only needed to increase legibility.}
<<>>=
( y <- 15*exp(2) )
@

An object can be named whatever you want, with the exception that it cannot start with a number, contain a space, or be the name of a reserved word or function in R (e.g., \R{pi} or \R{log}). Furthermore, object names should be short and simple enough that you can remember what is contained in the object. It is also good practice to view the object immediately after making the assignment to make sure that it contains results that seem appropriate.



\subsection{Functions and Arguments}  \label{sect:RFunctions}
R contains many ``programs,'' or functions, to perform particular tasks. A function is ``called'' by typing the function name followed by open and closed parentheses. Arguments, which the function will use to perform its task, are contained within the parentheses. The \R{log()} function, used in the previous section, is an example of a function. The name of the function is \R{log} and the argument, the number for which to compute the natural log, is contained within the parentheses following the function name. Many other functions will be described below and in subsequent modules.

\warn{Regular curved parentheses have two primary uses in R: (1) to control order of operations in expressions (as with a calculator) and (2) to contain the arguments sent to a function.}



\section{Working With Data}
\subsection{Data Types}  \label{sect:RDataTypes}
Data in R will be designated as an integer (whole numbers), numeric (non-integer numeric values), character (strings), factor (group membership), or logical (TRUE/FALSE). The type of data largely dictates the type of analysis that can be performed. Data types will be discussed in more detail as needed. Note, however, that the \textbf{factor} data type is a special case of the character data type, where the specific items describe the group to which an individual belongs. This description allows for certain analyses in later modules.

\subsection{Entering Data}  \label{sect:REnterData}
For real data (i.e., several variables from many individuals) it is most efficient to enter data into a comma-separated values (CSV) file and then import that file into R. Creating a CSV file with Microsoft Excel is described below, though there are other ways to create CSV files (see \href{http://derekogle.com/NCMTH107/resources/FAQ/}{FAQs on class webpage}). This explanation assumes that you have a basic understanding of Excel (or other spreadsheet softwares).

The spreadsheet should be organized with variables in columns and individuals in rows, with the exception that the first row should contain variable names. The example spreadsheet below shows the length (cm), weight (kg), and capture location data for a small sample of Black Bears.

\begin{center}
  \includegraphics[width=1.5in]{Figs/Data_File_1.jpg}
\end{center}

Variable names must NOT contain spaces. For example, don't use \var{total length} or \var{length (cm)}. If you feel the need to have longer variable names, then separate the parts with a period (e.g., \var{length.cm}) or an underscore (e.g., \var{length\_cm}). Furthermore, numerical measurements should NOT include units (e.g., don't use \verb"7 cm"). Finally, for categorical data, make sure that all categories are consistent (e.g., do not have a column that contains both \verb"bayfield" and \verb"Bayfield").

The spreadsheet is saved as a CSV file by selecting the \verb"File..Save As" menu item, which will produce the dialog box below. In this dialog box, change \verb"Save as type" to \verb"CSV (Comma delimited) (*.csv)" (you may have to scroll down), provide a file name (don't have any periods in the name besides for ``.csv'', which you should not have to type), select a location to save the file (don't forget this location!!), and press \verb"Save". Two ``warning'' dialog boxes may then appear -- select \verb"OK" for the first and \verb"YES" for the second. You can now close the spreadsheet file (you may be asked to save changes -- you should say \verb"No").
\begin{center}
  \includegraphics[width=3.5in]{Figs/Data_File_2.jpg}
\end{center}

The following steps are used to load the data in the CSV file into RStudio.

\begin{Itemize}
  \item Open RStudio.
  \item Open a new script by selecting the \verb"File", \verb"New File", \verb"R Script" menu items.
  \item Type \R{library(NCStats)} in the new script (i.e., in the upper-left pane).
  \item Save this script by selecting the \verb"File", \verb"Save" menu items. In the ensuing dialog box, navigate to the \textbf{exact same directory} where you saved the data, type a name for the file in the \verb"File name:" box (\textbf{do not use a period in this name!!}), and press \verb"Save".

\begin{center}
  \includegraphics[width=3.5in]{Figs/Data_File_3.jpg}
\end{center}

  \item Set the working directory (tell R where the file is) with the \verb"Session", \verb"Set Working Directory ...", \verb"To Source File Location" menu items in RStudio. RStudio will print an appropriate \R{setwd()} command to the console (lower-left pane). Copy this command from the console to the second line in your script.\footnote{Doing this will eliminate the need to manually select the menu options every time you want to run this script.}  For example, I stored the file created above in the \verb"C:/data" directory, so that RStudio will create this \R{setwd("C:/data")}.
  \item The CSV file is read into R by including the name of the file (in quotes) in \R{read.csv()}. For example, \R{"Bears.csv"} is read into R and stored into an object called \R{bears} with \R{bears <- read.csv("Bears.csv")}.
<<echo=FALSE>>=
bears <- read.csv("data/Bears.csv")
@

  \item One should check the data in this object as descried in \sectref{sect:RViewdf} below.
\end{Itemize}

It is important that each row of the data.frame correspond to one individual. This is critically important when data are recorded for two different groups (e.g., for a two-sample t-test; see \modref{chap:tTest2}). For example, the following data are methyl mercury levels recorded in mussels from two locations labeled as ``impacted'' and ``reference.''
\begin{Verbatim}
  impacted   0.011  0.054  0.056  0.095  0.051  0.077
  reference  0.031  0.040  0.029  0.066  0.018  0.042  0.044
\end{Verbatim}
To follow the ``one individual per row'' rule, these data are entered in stacked format where the ``reference'' data are stacked underneath the ``impacted'' data and a column is used to indicate to which group the individuals belong. For example, the Excel file for data entry would look like the following.

\begin{center}
  \includegraphics[width=1in]{Figs/StackedData.jpg}
\end{center}

\subsubsection*{Alternative Forms of Getting Data} \label{sect:RAltData}
Some of the data files that you will use are provided on the \href{http://derekogle.com/NCMTH107/resources/data_107}{Data for MTH107} resource page of the class webpage. In these cases, the data should be downloaded from the webpage and saved in the same directory or folder as your analysis script. The downloaded file is then read into R in the same manner as described previously (i.e., set the working directory with \R{setwd()} and use \R{read.csv()}).

A few data files used in these notes are supplied with R or the \R{NCStats} package. These files are loaded with \R{data()}. For example, the \dfile{iris} data file is loaded into R with
<<>>=
data(iris)
@


\vspace{24pt}
\subsection{Working With Data Frames}  \label{sect:RWorkdf}
\subsubsection{Viewing a Data Frame}  \label{sect:RViewdf}
Many users are disoriented in R because they cannot ``see'' their data in the same way that they see it in a spreadsheet program. There are, however, several options for viewing your data. First, you can type the name of the data.frame object to see its entire contents.
<<>>=
bears
@

Typing the name is adequate for small data.frames, but not useful for large data.frames. The entire data.frame is opened in a separate window by double-clicking on the name of the data.frame in the \R{Environment} tab of RStudio (in upper-right pane). Alternatively, the first and last three rows of a data.frame are viewed by including the data.frame object in \R{headtail()}.
<<>>=
headtail(bears)
@

In addition to viewing the contents, it is useful to examine the structure of the data.frame as returned from \R{str()}. In this example, it is seen that \Sexpr{kCounts(ncol(bears))} variables were recorded on \Sexpr{nrow(bears)} individuals. The first variables -- \var{\Sexpr{names(bears)[1]}} and \var{\Sexpr{names(bears)[2]}} -- are numerical measurements made on the bears. The last variable -- \var{\Sexpr{names(bears)[3]}} -- is a factor variable that records the capture location for each bear.
<<>>=
str(bears)
@
The levels of the \var{\Sexpr{names(bears)[3]}} variable may be seen by including this variable (with the data.frame name) as the argument to \R{levels()}.
<<>>=
levels(bears$loc)
@

In the previous example, the \R{\$} notation was used to identify a particular variable (i.e., \R{loc}) within a data.frame (\R{bears}). Think of variables as being nested inside data.frames and, thus, to access the variable you must first identify the data.frame in which it exists and then the name of the variable. The \R{\$} simply separates the data.frame from the variable.
<<>>=
bears$length.cm
bears$loc
@


\subsection{Vectors}  \label{sect:RVectors}
\vspace{-4pt}
Data.frames are the primary structure in which to store real data. However, much simpler situations that don't require a data.frame may arise. In R, items of the same data type \sectrefp{sect:RDataTypes} are stored in a one-dimensional \emph{vector}. Vectors are usually displayed in one row (with many columns), but they may also be thought of as a single column (with many rows). Items are entered into a vector with \R{c()}, where the individual arguments are specific numbers, characters, or logical values.\footnote{Note that \R{c} comes from the word ``concatenate.''}  Items for a vector of characters must be contained within paired quotes.
\vspace{-4pt}
<<>>=
( v <- c(1,2,5) )
( y <- c("Iowa","Minnesota","Wisconsin") )
@

Single variables from a data.frame are vectors.
\vspace{-4pt}
<<>>=
bears$length.cm
@

Vectors that are not extracted from a data.frame will only be used in this course for very simple lists of items, usually as arguments in a function.
