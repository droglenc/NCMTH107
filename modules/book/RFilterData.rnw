<<echo=FALSE, cache=FALSE, results='hide'>>=
set_parent('IntroStats.Rnw')
@

\chapter{Filtering Data In R} \label{chap:FilteringR}

\vspace{-12pt}
\minitoc
\vspace{24pt}

In the \modref{chap:FoundationsR}, you learned how to retrieve data from the class webpage, enter your own data into a CSV file, load that data into R, and how to view that data in R. In this module, we will learn how to create subsets (i.e., filter) a data.frame into smaller data.frames. For example, you may want to create a data.frame that contains just male bears from a data.frame with both male and female bears, or a data.frame that only contains sales during summer months from a data.frame that contains all sales. Less often you may wish to eliminate a particular individual from the data.frame, perhaps if it is considered to be erroneous.

\section{Filtering a data.frame}  \label{sect:RSubsetdf}
It is common to create a new data.frame that contains only some of the individuals from an existing data.frame. The process of creating the newer, smaller data.frame is called filtering (or subsetting) and is accomplished with \R{filterD()}. The \R{filterD()} function requires the original data.frame as the first argument and a condition statement as the second argument. The condition statement is used to either include or exclude individuals from the original data.frame. Condition statements consist of the name of a variable in the original data.frame, a comparison operator, and a comparison value \tabrefp{tab:RSubsetConditions}. The results from \R{filterD()} should be assigned to an object, which is then the name of the new data.frame.
\vspace{6pt}

\begin{table}[htbp]
  \caption{Condition operators used in \R{filterD()} and their results. Note that \emph{var} generically represents a variable in the original data.frame and \emph{value} is a generic value or level. Both \emph{variable} and \emph{value} would be replaced with specific items (see examples in main text).}  \label{tab:RSubsetConditions}
  \centering
\begin{tabular}{cc}
\hline\hline
Condition Operator &  Individuals Returned from Original Data Frame \\
\hline
\widen{-1}{6}{\emph{var}} $==$ \emph{value} & all individual that are \textbf{equal} to the given value \\
\widen{-1}{5}{\emph{var}} $!=$ \emph{value} & all individuals that are \textbf{NOT equal} to the given value \\
\widen{-1}{5}{\emph{var}} $>$ \emph{value} & all individuals that are \textbf{greater than} the given value \\
\widen{-1}{5}{\emph{var}} $>=$ \emph{value} & all individuals that are \textbf{greater than or equal} to the given value \\
\widen{-1}{5}{\emph{var}} $<$ \emph{value} & all individuals that are \textbf{less than} the given value \\
\widen{-1}{5}{\emph{var}} $<=$ \emph{value} & all individuals that are \textbf{less than or equal} to the given value \\
\widen{-1}{5}{\emph{condition}}, \emph{condition} & all individuals that \textbf{meet both conditions} \\
\widen{-2}{6}{\emph{condition}} $|$ \emph{condition} & all individuals that \textbf{meet one or both conditions}\footnote{Note that this ``or'' operator is a ``vertical line'' which is typed with the shift-backslash key.} \\
\hline\hline
\end{tabular}
\end{table}

\vspace{6pt}
The following are examples of new data.frames created from \var{bears} (which was created in the previous module). The name of the new data.frame (i.e., object left of the assignment operator) can be any valid object name. As demonstrated below, the new data.frame (or its structure) should be examined after each filtering to ensure that the data.frame actually contains the items that you desire.

<<echo=FALSE>>=
bears <- read.csv("data/Bears.csv")
@

\vspace{-8pt}
\begin{itemize}
  \item Only individuals from \emph{Bayfield} county.
\vspace{-4pt}
<<>>=
bf <- filterD(bears,loc=="Bayfield")
bf
@

  \item Individuals from both \emph{Bayfield} and \emph{Ashland} counties.
\vspace{-4pt}
<<>>=
bfash <- filterD(bears,loc %in% c("Bayfield","Ashland"))
bfash
@

  \item Individuals with a weight greater than 100 kg.
\vspace{-4pt}
<<>>=
gt100 <- filterD(bears,weight.kg>100)
gt100
@

  \item Individuals from \emph{Douglas} County that weighed at least 150 kg.
\vspace{-4pt}
<<>>=
do150 <- filterD(bears,loc=="Douglas",weight.kg>=150)
do150
@
\end{itemize}


\section{Selecting Individuals}  \label{sect:RSelectIndivs}
\vspace{-4pt}
In some instances, you may need to select or exclude an individual from a data.frame. Positions within an object are identified within square brackets. As data.frames are two-dimensional objects they are indexed by a row and a column, in that order. For example, the item in the third row and second column of \R{bears} is selected below.
\vspace{-4pt}
<<>>=
bears[3,2]
@

An entire row or column may be selected by omitting the other dimension. For example, one could select the entire second column with \R{bears[,2]}, but this is also the \R{weight.kg} variable and is better selected with \R{bears\$weight.kg}. As a better example, the entire third row is selected below (note that the column designation was omitted).
\vspace{-4pt}
<<>>=
bears[3,]
@

Multiple rows are selected by combining row indices together with \R{c()}. For example, the third, fifth, and eighth rows are selected below (again, the column index is omitted).
\vspace{-4pt}
<<>>=
bears[c(3,5,8),]
@

Finally, rows can be excluded by preceding the row indices with a negative sign.
\vspace{-4pt}
<<>>=
bears[-c(3,5,8,10,12),]
@
